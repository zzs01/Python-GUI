# -*- coding: utf-8 -*-

import os
import sys

import win32api
import wx
import wx.lib.agw.aui as aui
import wx.lib.inspection
import Img_source

from OfficeAutomation import FileExcelProcessing
from OfficeAutomation import FilePDFProcessing
from OfficeAutomation import FileSearch
from OfficeAutomation import FileCopy
from OfficeAutomation import FileCompared

APP_TITLE = u'办公自动化'

#将文本底色改为透明
#第一步：将主事件中wx.StaticText全部换成TransparentStaticText
#第二步：重现StaticText控件
class TransparentStaticText(wx.StaticText):
    def __init__(self, parent, id=wx.ID_ANY, label='', pos=wx.DefaultPosition, size=wx.DefaultSize,
                 style=wx.TRANSPARENT_WINDOW, name='TransparentStaticText'):
        wx.StaticText.__init__(self, parent, id, label, pos, size, style, name)
        self.Bind(wx.EVT_PAINT, self.OnPaint)
        self.Bind(wx.EVT_ERASE_BACKGROUND, lambda event: None)
        self.Bind(wx.EVT_SIZE, self.OnSize)
    def OnPaint(self, event):
        bdc = wx.PaintDC(self)
        dc = wx.GCDC(bdc)
        font_face = self.GetFont()
        font_color = self.GetForegroundColour()
        dc.SetFont(font_face)
        dc.SetTextForeground(font_color)
        dc.DrawText(self.GetLabel(), 0, 0)
    def OnSize(self, event):
        self.Refresh()
        event.Skip()

class ExcelFrame(wx.Panel):
    """程序副窗口类，继承自wx.Panel"""

    def __init__(self, parent):

        wx.Panel.__init__(self, parent)

        self.title = TransparentStaticText(self, label=u'办公自动化-Excel合并')  # 单页标题
        self.label_path = TransparentStaticText(self, label=u'请输入路径')  # 固定的文字

        # 输入框控件
        self.label_pwd = wx.TextCtrl(self, name='TC01', style=wx.TE_LEFT)
        self.label_pwd.Bind(wx.EVT_TEXT, self.EvtText)
        HSizer_pwd = wx.BoxSizer(wx.HORIZONTAL)
        HSizer_pwd.Add(self.label_path, proportion=0, flag=wx.ALL, border=5)
        HSizer_pwd.Add(self.label_pwd, proportion=1, flag=wx.ALL, border=5)

        # 按钮
        self.btn_cd = wx.Button(self, label=u'路径选择', pos=(350, 50), size=(100, 25))
        self.btn_cd.Bind(wx.EVT_BUTTON, self.OnclickChooseDir)
        self.btn_confirm = wx.Button(self, label=u'确认', size=(100, 25))
        self.btn_confirm.Bind(wx.EVT_BUTTON, self.OnclickConfirm)
        self.btn_clear = wx.Button(self, label=u'清除', size=(100, 25))
        self.btn_clear.Bind(wx.EVT_BUTTON, self.OnclickClear)

        HSizer_btn = wx.BoxSizer(wx.HORIZONTAL)
        HSizer_btn.Add(self.btn_cd, proportion=0, flag=wx.ALIGN_CENTER, border=5)
        HSizer_btn.Add(self.btn_clear, proportion=0, flag=wx.ALIGN_CENTER, border=5)
        HSizer_btn.Add(self.btn_confirm, proportion=0, flag=wx.ALIGN_CENTER, border=5)

        VSizer_all = wx.BoxSizer(wx.VERTICAL)
        VSizer_all.Add(self.title, proportion=0, flag=wx.BOTTOM | wx.TOP | wx.ALIGN_CENTER, border=20)
        VSizer_all.Add(HSizer_pwd, proportion=0, flag=wx.EXPAND | wx.LEFT | wx.RIGHT, border=45)
        VSizer_all.Add(HSizer_btn, proportion=0, flag=wx.ALIGN_CENTER | wx.TOP, border=45)
        self.SetSizer(VSizer_all)

    # 三、调用局部变量并绑定事件
    def EvtText(self, evt):
        """输入框事件函数"""
        self.text = evt.GetString()

    def OnClose(self, evt):
        """关闭窗口事件函数"""

        dlg = wx.MessageDialog(None, u'确定要关闭本窗口？', u'操作提示', wx.YES_NO | wx.ICON_QUESTION)
        if dlg.ShowModal() == wx.ID_YES:
            self.Destroy()

    def OnclickChooseDir(self, evt):
        """路径选择"""
        dlg = wx.DirDialog(None, u'请选择一个路径：', pos=(20, 20), size=(100, -1),
                           style=wx.DD_DEFAULT_STYLE | wx.DD_NEW_DIR_BUTTON)
        if dlg.ShowModal() == wx.ID_OK:
            self.path = dlg.GetPath()
            self.label_pwd.SetValue(self.path)
            print(self.path)

    def OnclickConfirm(self, evt):
        """鼠标确认"""
        if self.text:
            self.path = self.text
        self.event = FileExcelProcessing(self.path)
        self.event.run()

    def OnclickClear(self, evt):
        """清除框架内容"""
        self.label_pwd.Clear()


class PdfFrame(wx.Panel):
    """程序副窗口类，继承自wx.Panel"""

    def __init__(self, parent):

        wx.Panel.__init__(self, parent)

        self.title = TransparentStaticText(self, label=u'办公自动化-pdf合并')  # 单页标题
        self.label_path = TransparentStaticText(self, label=u'请输入路径')  # 固定的文字

        # 输入框控件
        self.label_pwd = wx.TextCtrl(self, name='TC01', style=wx.TE_LEFT)
        self.label_pwd.Bind(wx.EVT_TEXT, self.EvtText)
        HSizer_pwd = wx.BoxSizer(wx.HORIZONTAL)
        HSizer_pwd.Add(self.label_path, proportion=0, flag=wx.ALL, border=5)
        HSizer_pwd.Add(self.label_pwd, proportion=1, flag=wx.ALL, border=5)

        # 按钮
        self.btn_cd = wx.Button(self, label=u'路径选择', pos=(350, 50), size=(100, 25))
        self.btn_cd.Bind(wx.EVT_BUTTON, self.OnclickChooseDir)
        self.btn_confirm = wx.Button(self, label=u'确认', size=(100, 25))
        self.btn_confirm.Bind(wx.EVT_BUTTON, self.OnclickConfirm)
        self.btn_clear = wx.Button(self, label=u'清除', size=(100, 25))
        self.btn_clear.Bind(wx.EVT_BUTTON, self.OnclickClear)

        HSizer_btn = wx.BoxSizer(wx.HORIZONTAL)
        HSizer_btn.Add(self.btn_cd, proportion=0, flag=wx.ALIGN_CENTER, border=5)
        HSizer_btn.Add(self.btn_clear, proportion=0, flag=wx.ALIGN_CENTER, border=5)
        HSizer_btn.Add(self.btn_confirm, proportion=0, flag=wx.ALIGN_CENTER, border=5)

        VSizer_all = wx.BoxSizer(wx.VERTICAL)
        VSizer_all.Add(self.title, proportion=0, flag=wx.BOTTOM | wx.TOP | wx.ALIGN_CENTER, border=20)
        VSizer_all.Add(HSizer_pwd, proportion=0, flag=wx.EXPAND | wx.LEFT | wx.RIGHT, border=45)
        VSizer_all.Add(HSizer_btn, proportion=0, flag=wx.ALIGN_CENTER | wx.TOP, border=45)
        self.SetSizer(VSizer_all)

    # 三、调用局部变量并绑定事件
    def EvtText(self, evt):
        """输入框事件函数"""
        self.text = evt.GetString()

    def OnclickChooseDir(self, evt):
        """路径选择"""
        dlg = wx.DirDialog(None, u'请选择一个路径：', pos=(20, 20), size=(100, -1),
                           style=wx.DD_DEFAULT_STYLE | wx.DD_NEW_DIR_BUTTON)
        if dlg.ShowModal() == wx.ID_OK:
            self.path = dlg.GetPath()
            self.label_pwd.SetValue(self.path)
        print(self.path)

    def OnclickConfirm(self, evt):
        """鼠标确认"""
        if self.text:
            self.path = self.text
        self.event = FilePDFProcessing(self.path)
        self.event.MergePDF()

    def OnclickClear(self, evt):
        """清除框架内容"""
        self.label_pwd.Clear()


class FileSearchFrame(wx.Panel):
    """程序副窗口类，继承自wx.Panel"""

    def __init__(self, parent):

        wx.Panel.__init__(self, parent)

        self.title = TransparentStaticText(self, label=u'办公自动化-文件搜索')  # 单页标题
        self.label_path = TransparentStaticText(self, label=u'搜索路径名')  # 固定
        self.label_target = TransparentStaticText(self, label=u'搜索关键词')
        self.label_extent = TransparentStaticText(self, label=u'文件扩展名')

        # 输入框控件
        self.label_path_wd = wx.TextCtrl(self, name='TC01', style=wx.TE_LEFT)
        self.label_path_wd.Bind(wx.EVT_TEXT, self.EvtText)
        self.label_target_wd = wx.TextCtrl(self, name='TC02', style=wx.TE_LEFT)
        self.label_target_wd.Bind(wx.EVT_TEXT, self.EvtText)
        self.label_extent_wd = wx.TextCtrl(self, name='TC03', style=wx.TE_LEFT)
        self.label_extent_wd.Bind(wx.EVT_TEXT, self.EvtText)

        self.btn_cd = wx.Button(self, label=u'路径选择', size=(100, 25))
        self.btn_cd.Bind(wx.EVT_BUTTON, self.OnclickChooseDir)
        self.btn_target = wx.Button(self, label=u'清除关键词', size=(100, 25))
        self.btn_target.Bind(wx.EVT_BUTTON, self.OnclickClearTar)
        self.scores = ['All', 'None', 'txt', 'doc', 'excel']
        self.btn_extent = wx.Choice(self, choices=self.scores, size=(100, 25))
        self.btn_extent.Bind(wx.EVT_CHOICE, self.OnclickChooseExtent)
        self.btn_extent.SetSelection(0)

        HSizer_pwd = wx.BoxSizer(wx.HORIZONTAL)
        HSizer_pwd.Add(self.label_path, proportion=0, flag=wx.ALL, border=5)
        HSizer_pwd.Add(self.label_path_wd, proportion=1, flag=wx.ALL, border=5)
        HSizer_pwd.Add(self.btn_cd, proportion=0, flag=wx.ALIGN_CENTER, border=10)
        HSizer_pwd1 = wx.BoxSizer(wx.HORIZONTAL)
        HSizer_pwd1.Add(self.label_target, proportion=0, flag=wx.ALL, border=5)
        HSizer_pwd1.Add(self.label_target_wd, proportion=1, flag=wx.ALL, border=5)
        HSizer_pwd1.Add(self.btn_target, proportion=0, flag=wx.ALIGN_CENTER, border=10)
        HSizer_pwd2 = wx.BoxSizer(wx.HORIZONTAL)
        HSizer_pwd2.Add(self.label_extent, proportion=0, flag=wx.ALL, border=5)
        HSizer_pwd2.Add(self.label_extent_wd, proportion=1, flag=wx.ALL, border=5)
        self.label_extent_wd.SetValue('All')
        HSizer_pwd2.Add(self.btn_extent, proportion=0, flag=wx.ALIGN_CENTER, border=10)

        # 按钮
        self.btn_confirm = wx.Button(self, label=u'确认', size=(100, 25))
        self.btn_confirm.Bind(wx.EVT_BUTTON, self.OnclickConfirm)
        self.btn_clear = wx.Button(self, label=u'清除路径', size=(100, 25))
        self.btn_clear.Bind(wx.EVT_BUTTON, self.OnclickClear)

        HSizer_btn = wx.BoxSizer(wx.HORIZONTAL)
        HSizer_btn.Add(self.btn_confirm, proportion=0, flag=wx.ALIGN_CENTER, border=25)
        HSizer_btn.Add(self.btn_clear, proportion=0, flag=wx.ALIGN_CENTER, border=25)

        VSizer_all = wx.BoxSizer(wx.VERTICAL)
        VSizer_all.Add(self.title, proportion=0, flag=wx.BOTTOM | wx.TOP | wx.ALIGN_CENTER, border=10)
        VSizer_all.Add(HSizer_pwd, proportion=0, flag=wx.ALIGN_CENTER | wx.RIGHT, border=20)
        VSizer_all.Add(HSizer_pwd1, proportion=0, flag=wx.ALIGN_CENTER | wx.RIGHT, border=20)
        VSizer_all.Add(HSizer_pwd2, proportion=0, flag=wx.ALIGN_CENTER | wx.RIGHT, border=20)
        VSizer_all.Add(HSizer_btn, proportion=0, flag=wx.ALIGN_CENTER | wx.TOP, border=10)
        self.SetSizer(VSizer_all)

    # 三、调用局部变量并绑定事件
    def EvtText(self, evt):
        """输入框事件函数"""
        pass

    def OnclickChooseDir(self, evt):
        """路径选择"""
        dlg = wx.DirDialog(None, u'请选择一个路径：', pos=(20, 20), size=(100, -1),
                           style=wx.DD_DEFAULT_STYLE | wx.DD_NEW_DIR_BUTTON)
        if dlg.ShowModal() == wx.ID_OK:
            self.path = dlg.GetPath()
            self.label_path_wd.SetValue(self.path)
        print(self.path)

    def OnclickClearTar(self, evt):
        self.label_target_wd.Clear()

    def OnclickConfirm(self, evt):

        """鼠标确认"""
        label_path_wd_text = self.label_path_wd.GetValue().strip()
        label_target_wd_text = self.label_target_wd.GetValue().strip()
        label_extent_wd_text = self.label_extent_wd.GetValue().strip()

        label_path_wd_flag = 0
        label_target_wd_flag = 0
        label_extent_wd_flag = 0

        if not os.path.isdir(label_path_wd_text):
            dlg = wx.MessageDialog(None, u'请输入正确的路径', u'路径不正确', wx.YES_DEFAULT | wx.ICON_QUESTION)
            if dlg.ShowModal() == wx.ID_YES:
                self.Destroy()
        else:
            label_path_wd_flag = 1

        if not label_target_wd_text:
            dlg = wx.MessageDialog(None, u'请输入正确的关键词', u'关键词内容为空', wx.YES_DEFAULT | wx.ICON_QUESTION)
            if dlg.ShowModal() == wx.ID_YES:
                self.Destroy()
        else:
            label_target_wd_flag = 1

        if not label_extent_wd_text:
            dlg = wx.MessageDialog(None, u'请输入正确的拓展名', u'拓展名内容为空', wx.YES_DEFAULT | wx.ICON_QUESTION)
            if dlg.ShowModal() == wx.ID_YES:
                self.Destroy()
        else:
            label_extent_wd_flag = 1

        all_flag = label_path_wd_flag + label_target_wd_flag + label_extent_wd_flag
        if all_flag == 3:
            print('开始运行')
            self.event = FileSearch(label_path_wd_text, label_target_wd_text, label_extent_wd_text)
            self.event.run()
            print('运行结束')

    def OnclickClear(self, evt):
        """清除框架内容"""
        self.label_path_wd.Clear()

    def OnclickChooseExtent(self, evt):
        self.extent_text = evt.GetString()
        self.label_extent_wd.SetValue(self.extent_text)


class FileCopyFrame(wx.Panel):
    """程序副窗口类，继承自wx.Panel"""

    def __init__(self, parent):

        wx.Panel.__init__(self, parent)

        self.title = TransparentStaticText(self, label=u'办公自动化-文件复制')  # 单页标题
        self.label_path = TransparentStaticText(self, label=u'搜索路径名')  # 固定
        self.label_target_path = TransparentStaticText(self, label=u'保存的位置')
        self.label_ref = TransparentStaticText(self, label=u'参考的文件')
        self.label_extent = TransparentStaticText(self, label=u'文件扩展名')

        # 输入框控件
        self.label_path_wd = wx.TextCtrl(self, name='TC01', style=wx.TE_LEFT)
        self.label_path_wd.Bind(wx.EVT_TEXT, self.EvtText)
        self.label_target_path_wd = wx.TextCtrl(self, name='TC02', style=wx.TE_LEFT)
        self.label_target_path_wd.Bind(wx.EVT_TEXT, self.EvtText)
        self.label_ref_wd = wx.TextCtrl(self, name='TC03', style=wx.TE_LEFT)
        self.label_ref_wd.Bind(wx.EVT_TEXT, self.EvtText)
        self.label_extent_wd = wx.TextCtrl(self, name='TC04', style=wx.TE_LEFT)
        self.label_extent_wd.Bind(wx.EVT_TEXT, self.EvtText)

        self.btn_cd = wx.Button(self, label=u'路径选择', size=(100, 25))
        self.btn_cd.Bind(wx.EVT_BUTTON, self.OnclickChooseDir)
        self.btn_cd2 = wx.Button(self, label=u'路径选择', size=(100, 25))
        self.btn_cd2.Bind(wx.EVT_BUTTON, self.OnclickChooseDir2)
        self.btn_target = wx.Button(self, label=u'文件选择', size=(100, 25))
        self.btn_target.Bind(wx.EVT_BUTTON, self.OnclickChooseTar)
        self.scores = ['All', 'None', 'txt', 'doc', 'excel', 'pdf', 'dwg']
        self.btn_extent = wx.Choice(self, choices=self.scores, size=(100, 25))
        self.btn_extent.Bind(wx.EVT_CHOICE, self.OnclickChooseExtent)
        self.btn_extent.SetSelection(0)

        self.choice = ['精确匹配', '模糊匹配']
        self.btn_label_type = wx.Choice(self, choices=self.choice, size=(100, 25))
        self.btn_label_type.Bind(wx.EVT_CHOICE, self.OnclickChooseLabelType)
        self.btn_label_type.SetSelection(0)
        self.search_type = 0

        HSizer_pwd = wx.BoxSizer(wx.HORIZONTAL)
        HSizer_pwd.Add(self.label_path, proportion=0, flag=wx.ALL, border=5)
        HSizer_pwd.Add(self.label_path_wd, proportion=1, flag=wx.ALL, border=5)
        HSizer_pwd.Add(self.btn_cd, proportion=0, flag=wx.ALIGN_CENTER, border=0)
        HSizer_pwd1 = wx.BoxSizer(wx.HORIZONTAL)
        HSizer_pwd1.Add(self.label_ref, proportion=0, flag=wx.ALL, border=5)
        HSizer_pwd1.Add(self.label_ref_wd, proportion=1, flag=wx.ALL, border=5)
        HSizer_pwd1.Add(self.btn_target, proportion=0, flag=wx.ALIGN_CENTER, border=10)
        HSizer_pwd2 = wx.BoxSizer(wx.HORIZONTAL)
        HSizer_pwd2.Add(self.label_extent, proportion=0, flag=wx.ALL, border=5)
        HSizer_pwd2.Add(self.label_extent_wd, proportion=1, flag=wx.ALL, border=5)
        HSizer_pwd2.Add(self.btn_extent, proportion=0, flag=wx.ALIGN_CENTER, border=10)
        self.label_extent_wd.SetValue('All')
        HSizer_pwd3 = wx.BoxSizer(wx.HORIZONTAL)
        HSizer_pwd3.Add(self.label_target_path, proportion=0, flag=wx.ALL, border=5)
        HSizer_pwd3.Add(self.label_target_path_wd, proportion=1, flag=wx.ALL, border=5)
        HSizer_pwd3.Add(self.btn_cd2, proportion=0, flag=wx.ALIGN_CENTER, border=10)

        # 按钮
        self.btn_confirm = wx.Button(self, label=u'确认', size=(100, 25))
        self.btn_confirm.Bind(wx.EVT_BUTTON, self.OnclickConfirm)
        self.btn_clear = wx.Button(self, label=u'清除路径', size=(100, 25))
        self.btn_clear.Bind(wx.EVT_BUTTON, self.OnclickClear)

        HSizer_btn = wx.BoxSizer(wx.HORIZONTAL)
        HSizer_btn.Add(self.btn_confirm, proportion=0, flag=wx.ALIGN_CENTER, border=20)
        HSizer_btn.Add(self.btn_clear, proportion=0, flag=wx.ALIGN_CENTER, border=20)

        VSizer_all = wx.BoxSizer(wx.VERTICAL)
        VSizer_all.Add(self.title, proportion=0, flag=wx.BOTTOM | wx.TOP | wx.ALIGN_CENTER, border=7)
        VSizer_all.Add(HSizer_pwd, proportion=0, flag=wx.ALIGN_CENTER | wx.RIGHT, border=25)
        VSizer_all.Add(HSizer_pwd3, proportion=0, flag=wx.ALIGN_CENTER | wx.RIGHT, border=25)
        VSizer_all.Add(HSizer_pwd1, proportion=0, flag=wx.ALIGN_CENTER | wx.RIGHT, border=25)
        VSizer_all.Add(HSizer_pwd2, proportion=0, flag=wx.ALIGN_CENTER | wx.RIGHT, border=25)
        VSizer_all.Add(HSizer_btn, proportion=0, flag=wx.ALIGN_CENTER | wx.TOP, border=10)
        self.SetSizer(VSizer_all)

    # 三、调用局部变量并绑定事件
    def EvtText(self, evt):
        """输入框事件函数"""
        pass

    def OnclickChooseDir(self, evt):
        """路径选择"""
        dlg = wx.DirDialog(None, u'请选择一个路径：', pos=(20, 20), size=(100, -1),
                           style=wx.DD_DEFAULT_STYLE | wx.DD_NEW_DIR_BUTTON)
        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPath()
            self.label_path_wd.SetValue(path)

    def OnclickChooseDir2(self, evt):
        """路径选择"""
        dlg = wx.DirDialog(None, u'请选择一个路径：', pos=(20, 20), size=(100, -1),
                           style=wx.DD_DEFAULT_STYLE | wx.DD_NEW_DIR_BUTTON)
        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPath()
            self.label_target_path_wd.SetValue(path)

    def OnclickChooseTar(self, evt):
        dlg = wx.FileDialog(None, u'请选择文件：', pos=(20, 20), size=(100, -1),
                            style=wx.DD_DEFAULT_STYLE | wx.DD_NEW_DIR_BUTTON)
        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPath()
            self.label_ref_wd.SetValue(path)

    def OnclickClear(self, evt):
        """清除框架内容"""
        self.label_path_wd.Clear()
        self.label_target_path_wd.Clear()
        self.label_ref_wd.Clear()

    def OnclickChooseExtent(self, evt):
        self.extent_text = evt.GetString()
        self.label_extent_wd.SetValue(self.extent_text)

    def OnclickChooseLabelType(self, evt):
        label_text = evt.GetString()
        if label_text == self.choice[1]:
            self.search_type = 1

    def OnclickConfirm(self, evt):

        """鼠标确认"""
        label_path_wd_text = self.label_path_wd.GetValue().strip()
        label_tar_path_wd_text = self.label_target_path_wd.GetValue().strip()
        label_ref_wd_text = self.label_ref_wd.GetValue().strip()
        label_extent_wd_text = self.label_extent_wd.GetValue().strip()

        label_path_wd_flag = 0
        label_tar_path_wd_flag = 0
        label_ref_wd_flag = 0
        label_extent_wd_flag = 0

        if not os.path.isdir(label_path_wd_text):
            dlg = wx.MessageDialog(None, u'请输入正确的搜索路径', u'路径不正确', wx.YES_DEFAULT | wx.ICON_QUESTION)
            if dlg.ShowModal() == wx.ID_YES:
                self.Destroy()
        else:
            label_path_wd_flag = 1

        if not os.path.isdir(label_tar_path_wd_text):
            dlg = wx.MessageDialog(None, u'请输入正确的保存路径', u'路径不正确', wx.YES_DEFAULT | wx.ICON_QUESTION)
            if dlg.ShowModal() == wx.ID_YES:
                self.Destroy()
        else:
            label_tar_path_wd_flag = 1

        if (not os.path.isfile(label_ref_wd_text)) or (label_ref_wd_text.split(r'.')[-1].lower() != 'txt'):
            dlg = wx.MessageDialog(None, u'请输入正确的参考文件', u'参考文件为空或非txt格式文件', wx.YES_DEFAULT | wx.ICON_QUESTION)
            if dlg.ShowModal() == wx.ID_YES:
                self.Destroy()
        else:
            label_ref_wd_flag = 1

        if not label_extent_wd_text:
            dlg = wx.MessageDialog(None, u'请输入正确的拓展名', u'拓展名内容为空', wx.YES_DEFAULT | wx.ICON_QUESTION)
            if dlg.ShowModal() == wx.ID_YES:
                self.Destroy()
        else:
            label_extent_wd_flag = 1

        all_flag = label_path_wd_flag + label_tar_path_wd_flag + label_ref_wd_flag + label_extent_wd_flag
        if all_flag == 4:
            print('开始运行')
            self.event = FileCopy(label_path_wd_text, label_tar_path_wd_text, label_ref_wd_text, label_extent_wd_text,
                                  self.search_type)
            self.event.run()
            print('运行结束')


class FileComparedFrame(wx.Panel):
    """程序副窗口类，继承自wx.Panel"""

    def __init__(self, parent):

        wx.Panel.__init__(self, parent)

        self.title = TransparentStaticText(self, label=u'办公自动化-文件对比')  # 单页标题
        self.label_path1 = TransparentStaticText(self, label=u'对比路径一')  # 固定
        self.label_path2 = TransparentStaticText(self, label=u'对比路径二')
        self.label_saveP1 = TransparentStaticText(self, label=u'保存路径一')
        self.label_saveP2 = TransparentStaticText(self, label=u'保存路径二')

        # 输入框控件
        self.label_path1_wd = wx.TextCtrl(self, name='TC01', style=wx.TE_LEFT)
        self.label_path1_wd.Bind(wx.EVT_TEXT, self.EvtText)
        self.label_path2_wd = wx.TextCtrl(self, name='TC02', style=wx.TE_LEFT)
        self.label_path2_wd.Bind(wx.EVT_TEXT, self.EvtText)
        self.label_saveP1_wd = wx.TextCtrl(self, name='TC03', style=wx.TE_LEFT)
        self.label_saveP1_wd.Bind(wx.EVT_TEXT, self.EvtText)
        self.label_saveP2_wd = wx.TextCtrl(self, name='TC04', style=wx.TE_LEFT)
        self.label_saveP2_wd.Bind(wx.EVT_TEXT, self.EvtText)

        self.btn_cd = wx.Button(self, label=u'路径选择', size=(100, 25))
        self.btn_cd.Bind(wx.EVT_BUTTON, self.OnclickChooseDir)
        self.btn_cd2 = wx.Button(self, label=u'路径选择', size=(100, 25))
        self.btn_cd2.Bind(wx.EVT_BUTTON, self.OnclickChooseDir2)
        self.btn_saveCD1 = wx.Button(self, label=u'路径选择', size=(100, 25))
        self.btn_saveCD1.Bind(wx.EVT_BUTTON, self.OnclickChooseSaveS)
        self.btn_saveCD2 = wx.Button(self, label=u'路径选择', size=(100, 25))
        self.btn_saveCD2.Bind(wx.EVT_BUTTON, self.OnclickChooseSaveD)

        # self.choice = ['精确匹配', '模糊匹配']
        # self.btn_label_type = wx.Choice(self, choices=self.choice, size=(100, 25))
        # self.btn_label_type.Bind(wx.EVT_CHOICE, self.OnclickChooseLabelType)
        # self.btn_label_type.SetSelection(0)
        # self.search_type = 0

        HSizer_pwd = wx.BoxSizer(wx.HORIZONTAL)
        HSizer_pwd.Add(self.label_path1, proportion=0, flag=wx.ALL, border=5)
        HSizer_pwd.Add(self.label_path1_wd, proportion=1, flag=wx.ALL, border=5)
        HSizer_pwd.Add(self.btn_cd, proportion=0, flag=wx.ALIGN_CENTER, border=0)
        HSizer_pwd1 = wx.BoxSizer(wx.HORIZONTAL)
        HSizer_pwd1.Add(self.label_saveP1, proportion=0, flag=wx.ALL, border=5)
        HSizer_pwd1.Add(self.label_saveP1_wd, proportion=1, flag=wx.ALL, border=5)
        HSizer_pwd1.Add(self.btn_saveCD1, proportion=0, flag=wx.ALIGN_CENTER, border=10)
        HSizer_pwd2 = wx.BoxSizer(wx.HORIZONTAL)
        HSizer_pwd2.Add(self.label_saveP2, proportion=0, flag=wx.ALL, border=5)
        HSizer_pwd2.Add(self.label_saveP2_wd, proportion=1, flag=wx.ALL, border=5)
        HSizer_pwd2.Add(self.btn_saveCD2, proportion=0, flag=wx.ALIGN_CENTER, border=10)

        HSizer_pwd3 = wx.BoxSizer(wx.HORIZONTAL)
        HSizer_pwd3.Add(self.label_path2, proportion=0, flag=wx.ALL, border=5)
        HSizer_pwd3.Add(self.label_path2_wd, proportion=1, flag=wx.ALL, border=5)
        HSizer_pwd3.Add(self.btn_cd2, proportion=0, flag=wx.ALIGN_CENTER, border=10)

        # 按钮
        self.btn_confirm = wx.Button(self, label=u'确认', size=(100, 25))
        self.btn_confirm.Bind(wx.EVT_BUTTON, self.OnclickConfirm)
        self.btn_clear = wx.Button(self, label=u'清除路径', size=(100, 25))
        self.btn_clear.Bind(wx.EVT_BUTTON, self.OnclickClear)

        HSizer_btn = wx.BoxSizer(wx.HORIZONTAL)
        HSizer_btn.Add(self.btn_confirm, proportion=0, flag=wx.ALIGN_CENTER, border=20)
        HSizer_btn.Add(self.btn_clear, proportion=0, flag=wx.ALIGN_CENTER, border=20)

        VSizer_all = wx.BoxSizer(wx.VERTICAL)
        VSizer_all.Add(self.title, proportion=0, flag=wx.BOTTOM | wx.TOP | wx.ALIGN_CENTER, border=7)
        VSizer_all.Add(HSizer_pwd, proportion=0, flag=wx.ALIGN_CENTER | wx.RIGHT, border=25)
        VSizer_all.Add(HSizer_pwd3, proportion=0, flag=wx.ALIGN_CENTER | wx.RIGHT, border=25)
        VSizer_all.Add(HSizer_pwd1, proportion=0, flag=wx.ALIGN_CENTER | wx.RIGHT, border=25)
        VSizer_all.Add(HSizer_pwd2, proportion=0, flag=wx.ALIGN_CENTER | wx.RIGHT, border=25)
        VSizer_all.Add(HSizer_btn, proportion=0, flag=wx.ALIGN_CENTER | wx.TOP, border=10)
        self.SetSizer(VSizer_all)

    # 三、调用局部变量并绑定事件
    def EvtText(self, evt):
        """输入框事件函数"""
        pass

    def OnclickChooseDir(self, evt):
        """路径选择"""
        dlg = wx.DirDialog(None, u'请选择对比路径1：', pos=(20, 20), size=(100, -1),
                           style=wx.DD_DEFAULT_STYLE | wx.DD_NEW_DIR_BUTTON)
        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPath()
            self.label_path1_wd.SetValue(path)

    def OnclickChooseDir2(self, evt):
        """路径选择"""
        dlg = wx.DirDialog(None, u'请选择对比路径2：', pos=(20, 20), size=(100, -1),
                           style=wx.DD_DEFAULT_STYLE | wx.DD_NEW_DIR_BUTTON)
        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPath()
            self.label_path2_wd.SetValue(path)

    def OnclickChooseSaveS(self, evt):
        dlg = wx.DirDialog(None, u'请选择路径一相同文件保存的路径：', pos=(20, 20), size=(100, -1),
                           style=wx.DD_DEFAULT_STYLE | wx.DD_NEW_DIR_BUTTON)
        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPath()
            self.label_saveP1_wd.SetValue(path)

    def OnclickChooseSaveD(self, evt):
        dlg = wx.DirDialog(None, u'请选择路径二相同文件保存的路径：', pos=(20, 20), size=(100, -1),
                           style=wx.DD_DEFAULT_STYLE | wx.DD_NEW_DIR_BUTTON)
        if dlg.ShowModal() == wx.ID_OK:
            path = dlg.GetPath()
            self.label_saveP2_wd.SetValue(path)

    def OnclickClear(self, evt):
        """清除框架内容"""
        self.label_path1_wd.Clear()
        self.label_path2_wd.Clear()
        self.label_saveP1_wd.Clear()
        self.label_saveP2_wd.Clear()

    # def OnclickChooseLabelType(self, evt):
    #     label_text = evt.GetString()
    #     if label_text == self.choice[1]:
    #         self.search_type = 1

    def OnclickConfirm(self, evt):

        """鼠标确认"""
        label_path_wd_text = self.label_path1_wd.GetValue().strip()
        label_tar_path_wd_text = self.label_path2_wd.GetValue().strip()
        label_ref_wd_text = self.label_saveP1_wd.GetValue().strip()
        label_extent_wd_text = self.label_saveP2_wd.GetValue().strip()

        label_path_wd_flag = 0
        label_tar_path_wd_flag = 0
        label_ref_wd_flag = 0
        label_extent_wd_flag = 0

        if not os.path.isdir(label_path_wd_text):
            dlg = wx.MessageDialog(None, u'请输入正确的对比路径一', u'路径不正确', wx.YES_DEFAULT | wx.ICON_QUESTION)
            if dlg.ShowModal() == wx.ID_YES:
                self.Destroy()
        else:
            label_path_wd_flag = 1

        if not os.path.isdir(label_tar_path_wd_text):
            dlg = wx.MessageDialog(None, u'请输入正确的对比路径二', u'路径不正确', wx.YES_DEFAULT | wx.ICON_QUESTION)
            if dlg.ShowModal() == wx.ID_YES:
                self.Destroy()
        else:
            label_tar_path_wd_flag = 1

        if not os.path.isdir(label_ref_wd_text):
            dlg = wx.MessageDialog(None, u'请输入正确的保存路径一', u'路径不正确', wx.YES_DEFAULT | wx.ICON_QUESTION)
            if dlg.ShowModal() == wx.ID_YES:
                self.Destroy()
        else:
            label_ref_wd_flag = 1

        if not os.path.isdir(label_extent_wd_text):
            dlg = wx.MessageDialog(None, u'请输入正确的保存路径二', u'路径不正确', wx.YES_DEFAULT | wx.ICON_QUESTION)
            if dlg.ShowModal() == wx.ID_YES:
                self.Destroy()
        else:
            label_extent_wd_flag = 1

        all_flag = label_path_wd_flag + label_tar_path_wd_flag + label_ref_wd_flag + label_extent_wd_flag
        if all_flag == 4:
            print('开始运行')
            self.event = FileCompared(label_path_wd_text, label_tar_path_wd_text, label_ref_wd_text,
                                      label_extent_wd_text)
            self.event.run()
            print('运行结束')


class MainFrame(wx.Frame):
    """程序主窗口类，继承自wx.Frame"""

    id_open = wx.NewIdRef()
    id_save = wx.NewIdRef()
    id_quit = wx.NewIdRef()

    id_help = wx.NewIdRef()
    id_about = wx.NewIdRef()

    def __init__(self, parent):
        """构造函数"""

        wx.Frame.__init__(self, parent, -1, APP_TITLE)
        self.SetBackgroundColour(wx.Colour(224, 224, 224))
        self.SetMaxSize((500, 400))
        self.SetMinSize((500, 400))
        self.Center()

        if hasattr(sys, "frozen") and getattr(sys, "frozen") == "windows_exe":
            exeName = win32api.GetModuleFileName(win32api.GetModuleHandle(None))
            icon = wx.Icon(exeName, wx.BITMAP_TYPE_ICO)
        else:
            icon = Img_source.favicon.GetIcon()
        self.SetIcon(icon)

        self.tb1 = self._CreateToolBar()

        # 分页面创建
        panel_Excel = ExcelFrame(self)
        panel_Pdf = PdfFrame(self)
        panel_FileSearch = FileSearchFrame(self)
        panel_FileCopy = FileCopyFrame(self)
        panel_FileCompared = FileComparedFrame(self)

        p_left = wx.Panel(self)
        p_bottom = wx.Panel(self)

        panel_Excel.Bind(wx.EVT_ERASE_BACKGROUND,self.OnEraseBack)
        panel_Pdf.Bind(wx.EVT_ERASE_BACKGROUND, self.OnEraseBack)
        panel_FileSearch.Bind(wx.EVT_ERASE_BACKGROUND, self.OnEraseBack)
        panel_FileCopy.Bind(wx.EVT_ERASE_BACKGROUND, self.OnEraseBack)
        panel_FileCompared.Bind(wx.EVT_ERASE_BACKGROUND, self.OnEraseBack)
        # p_left.Bind(wx.EVT_ERASE_BACKGROUND, self.OnEraseBack)
        # p_bottom.Bind(wx.EVT_ERASE_BACKGROUND, self.OnEraseBack)

        # 分页控制按钮创建
        btn_excel = wx.Button(p_left, label=u'Excel合并', pos=(8, 20), size=(100, -1))
        btn_excel.Bind(wx.EVT_BUTTON, self.OnSwitchExcel)
        btn_pdf = wx.Button(p_left, label=u'Pdf合并', pos=(8, 50), size=(100, -1))
        btn_pdf.Bind(wx.EVT_BUTTON, self.OnSwitchPdf)
        brn_fileCopy = wx.Button(p_left, label=u'文件复制', pos=(8, 80), size=(100, -1))
        brn_fileCopy.Bind(wx.EVT_BUTTON, self.OnSwitchFileCopy)
        btn_fileSearch = wx.Button(p_left, label=u'文件搜索', pos=(8, 110), size=(100, -1))
        btn_fileSearch.Bind(wx.EVT_BUTTON, self.OnSwitchFileSearch)
        btn_FileCompared = wx.Button(p_left, label=u'文件对比', pos=(8, 140), size=(100, -1))
        btn_FileCompared.Bind(wx.EVT_BUTTON, self.OnSwitchFileCompared)

        self._mgr = aui.AuiManager()
        self._mgr.SetManagedWindow(self)

        # 工具条创建
        self._mgr.AddPane(self.tb1,
                          aui.AuiPaneInfo().Name("ToolBar1").Caption(u"工具条").ToolbarPane().Top().Row(0).Position(
                              0).Floatable(False).CaptionVisible(False).Resizable(True)
                          )
        # 功能切换
        self._mgr.AddPane(p_left,
                          aui.AuiPaneInfo().Name("LeftPanel").Left().Layer(1).MinSize((100, -1)).Caption(
                              u"功能切换区").CaptionVisible(False).Resizable(True)
                          )

        # 一功能区域
        self._mgr.AddPane(panel_Excel,
                          aui.AuiPaneInfo().Name("CenterPanelExcel").CenterPane().Show()
                          )

        # 二功能区域
        self._mgr.AddPane(panel_Pdf,
                          aui.AuiPaneInfo().Name("CenterPanelPdf").CenterPane().Hide()
                          )

        # 三功能区域
        self._mgr.AddPane(panel_FileSearch,
                          aui.AuiPaneInfo().Name("CenterPanelFileSearch").CenterPane().Hide()
                          )

        # 四功能区域
        self._mgr.AddPane(panel_FileCopy,
                          aui.AuiPaneInfo().Name("CenterPanelFileCopy").CenterPane().Hide()
                          )

        # 五功能区域
        self._mgr.AddPane(panel_FileCompared,
                          aui.AuiPaneInfo().Name("CenterPanelFileCompared").CenterPane().Hide()
                          )

        # 消息显示区域
        self._mgr.AddPane(p_bottom,
                          aui.AuiPaneInfo().Name("BottomPanel").Bottom().MinSize((-1, 80)).Caption(
                              u"消息区").CaptionVisible(False).Resizable(True)
                          )

        self._mgr.Update()

    def _CreateToolBar(self, d='H'):
        """创建工具栏"""

        bmp_open = Img_source.Open.GetBitmap()
        bmp_save = Img_source.Save.GetBitmap()
        bmp_help = Img_source.Copy.GetBitmap()
        bmp_about = Img_source.About.GetBitmap()

        if d.upper() in ['V', 'VERTICAL']:
            tb = aui.AuiToolBar(self, -1, wx.DefaultPosition, wx.DefaultSize,
                                agwStyle=aui.AUI_TB_TEXT | aui.AUI_TB_VERTICAL)
        else:
            tb = aui.AuiToolBar(self, -1, wx.DefaultPosition, wx.DefaultSize, agwStyle=aui.AUI_TB_TEXT)
        tb.SetToolBitmapSize(wx.Size(16, 16))

        tb.AddSimpleTool(self.id_open, u'打开', bmp_open, u'打开文件')
        tb.AddSimpleTool(self.id_save, u'保存', bmp_save, u'保存文件')
        tb.AddSeparator()
        tb.AddSimpleTool(self.id_help, u'帮助', bmp_help, u'帮助')
        tb.AddSimpleTool(self.id_about, u'关于', bmp_about, u'关于')

        tb.Realize()
        return tb

    def OnSwitch(self, ret_flag):
        """切换信息显示窗口"""

        p0 = self._mgr.GetPane('CenterPanelExcel')
        p1 = self._mgr.GetPane('CenterPanelPdf')
        p2 = self._mgr.GetPane('CenterPanelFileSearch')
        p3 = self._mgr.GetPane('CenterPanelFileCopy')
        p4 = self._mgr.GetPane('CenterPanelFileCompared')

        p_list = [p0, p1, p2, p3, p4]

        p_mode = p_list.pop(ret_flag)
        p_mode.Show()

        for i in p_list:
            i.Hide()

        self._mgr.Update()

    def OnSwitchExcel(self, evt):
        """Excel合并"""
        self.OnSwitch(0)

    def OnSwitchPdf(self, evt):
        """PDF合并"""
        self.OnSwitch(1)

    def OnSwitchFileSearch(self, evt):
        """文件搜索"""
        self.OnSwitch(2)

    def OnSwitchFileCopy(self, evt):
        self.OnSwitch(3)

    def OnSwitchFileCompared(self, evt):
        self.OnSwitch(4)

    # 背景图片设置
    def OnEraseBack(self,event):
        dc = event.GetDC()
        if not dc:
            dc = wx.ClientDC(self)
            rect = self.GetUpdateRegion().GetBox()
            dc.SetClippingRect(rect)
        dc.Clear()
        bmp_img = Img_source.new1.GetBitmap()
        # bmp = wx.Bitmap(bmp_img)
        dc.DrawBitmap(bmp_img, 0, 0)


class MainApp(wx.App):
    def OnInit(self):
        self.SetAppName(APP_TITLE)
        self.Frame = MainFrame(None)
        self.Frame.Show()
        return True


if __name__ == "__main__":
    # app = MainApp()
    app = MainApp(redirect=True, filename="debug.txt")
    # wx.lib.inspection.InspectionTool().Show() # 窗口的按钮显示等
    app.MainLoop()
